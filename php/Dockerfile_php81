FROM php:8.1.8-fpm

ENV REDIS_VERSION=5.3.5  SWOOLE_VERSION=4.8.6 XLSWRITER_VERSION=1.5.1 IMAGICK_VERSION=3.7.0  

# 设置时区
RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \  
    && echo 'Asia/Shanghai' > /etc/timezone  

#更换源  
RUN sed -i "s/deb.debian.org/mirrors.aliyun.com/g" /etc/apt/sources.list  
RUN sed -i "s/http/https/g" /etc/apt/sources.list  

#编译安装扩展 gd 与其他依赖配置  
RUN apt-get update &&\  
    apt-get install --allow-downgrades -y  libz-dev unzip sudo  \  
       libzip-dev libfreetype6-dev libjpeg62-turbo-dev libpng-dev libssl-dev libcurl4-openssl-dev &&\  
    apt-get clean &&\  
    apt-get autoremove &&\  
    docker-php-ext-configure gd --with-freetype --with-jpeg &&\  
    docker-php-ext-install -j$(nproc) gd  

# top 与 ps 这类的监控软件 ，需要时添加  
#RUN apt install procps --allow-downgrades -y  

# imagick extension  
RUN apt-get -y install libmagickwand-dev && pecl install imagick-$IMAGICK_VERSION && docker-php-ext-enable imagick  

# xlswriter extension  
RUN pecl install xlswriter-$XLSWRITER_VERSION && docker-php-ext-enable xlswriter  

# redis extension
RUN pecl install redis-$REDIS_VERSION && docker-php-ext-enable redis  

#安装其他必需扩展  
RUN docker-php-ext-install bcmath pdo_mysql zip sockets pcntl  

#安装swoole
#RUN pecl install swoole-$SWOOLE_VERSION && docker-php-ext-enable swoole  

# Composer安装 与设置镜像地址  
RUN curl -sS https://getcomposer.org/installer | php \  
    && mv composer.phar /usr/local/bin/composer \  
    && composer self-update --clean-backups \  
    && composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/  

# php-OPcache 配置  
RUN touch /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini &&  \  
    echo "[opcache]" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "zend_extension=opcache.so" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.enable=1" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.enable_cli=1" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.memory_consumption=256" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.interned_strings_buffer=8" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.max_accelerated_files=100000" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.max_wasted_percentage=5" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.use_cwd=1" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.validate_timestamps=1" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.revalidate_freq=2" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "opcache.save_comments=0" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "# 其他php配置" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "memory_limit=256M" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "upload_max_filesize=50M" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "post_max_size=50M" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
    echo "expose_php=Off" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini

# JIT 会导致一些奇怪的运行时崩溃问题 连着3个版本在修bug 暂时禁用  
#echo "opcache.jit_debug=0" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
#echo "opcache.jit=1255" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  
#echo "opcache.jit_buffer_size=256M" >> /usr/local/etc/php/conf.d/docker-php-ext-OPcache.ini && \  

# 更改 fpm 的分组 因为我 宿主机有 www:x:1001:1001 分组跟用户 所以才做这样的处理 其他机器按照自己想要的分组去处理就好  
# groupadd -g 1001 www 默认已经存在，不需要添加  
RUN  useradd -u 1001 www &&  \  
    sed -i "s/www-data/www/g" /usr/local/etc/php-fpm.d/www.conf && \  
    sed -i "s/pm.max_children = 5/pm.max_children = 30/g" /usr/local/etc/php-fpm.d/www.conf && \  
    sed -i "s/pm.start_servers = 2/pm.start_servers = 20/g" /usr/local/etc/php-fpm.d/www.conf && \  
    sed -i "s/pm.min_spare_servers = 1/pm.min_spare_servers = 15/g" /usr/local/etc/php-fpm.d/www.conf && \  
    sed -i "s/pm.max_spare_servers = 3/pm.max_spare_servers = 25/g" /usr/local/etc/php-fpm.d/www.conf

# fpm 参数调整 开启 debug log & 开启慢日志  
RUN sed -i "s/;log_level = notice/log_level = debug/g" /usr/local/etc/php-fpm.conf && \  
    sed -i "s/;emergency_restart_threshold = 0/emergency_restart_threshold = 10/g" /usr/local/etc/php-fpm.conf && \  
    sed -i "s/;emergency_restart_interval = 0/emergency_restart_interval = 1m/g" /usr/local/etc/php-fpm.conf && \  
    sed -i "s/;process_control_timeout = 0/process_control_timeout = 10s/g" /usr/local/etc/php-fpm.conf && \  
    sed -i "s/;request_slowlog_timeout = 0/request_slowlog_timeout = 5s/g" /usr/local/etc/php-fpm.d/www.conf && \  
    echo "slowlog = /proc/self/fd/2" >> /usr/local/etc/php-fpm.d/www.conf



CMD docker-php-entrypoint php-fpm

EXPOSE 9000